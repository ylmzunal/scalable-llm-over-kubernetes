apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-chatbot-backend
  namespace: default
  labels:
    app: llm-chatbot
    component: backend
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: llm-chatbot
      component: backend
  template:
    metadata:
      labels:
        app: llm-chatbot
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: llm-chatbot-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: llm-chatbot-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "kubernetes"
        - name: PORT
          value: "8000"
        - name: LLM_MODEL_TYPE
          valueFrom:
            configMapKeyRef:
              name: llm-chatbot-config
              key: model_type
        - name: LLM_MODEL_NAME
          valueFrom:
            configMapKeyRef:
              name: llm-chatbot-config
              key: model_name
        - name: LLM_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: llm-chatbot-config
              key: llm_base_url
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        # Optional: OpenAI API key from secret
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: llm-chatbot-secrets
              key: openai_api_key
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-logs
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      restartPolicy: Always 